print("Loss")
} else {
print('point')
}
}
x
game(x)
game = function(x=sum(sample(1:6, 2, replace=T))) {
if (x==7 | x==11) {
print('WIN')
} else if (x==2 | x==3 | x==12) {
print("Loss")
} else {
print('point')
}
}
x
game(x)
game = function(x=sum(sample(1:6, 2, replace=T))) {
if (x==7 | x==11) {
print('WIN')
} else if (x==2 | x==3 | x==12) {
print("Loss")
} else {
print('point')
}
}
x
game(x)
c(3,1)
c(3:1)
(matrix(3:1,3:1))
(matrix(1:6,2,3)
(matrix(1:6,2,3))
(matrix(1:6,2,3))
(matrix(3:1,3:1))
(matrix(1:6,2,3))
(matrix(3:1,3:1))
matrix(1:6,2,3)
a=matrix(1:6,2,3)
a
b = matrix(3:1,3:1)
b
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
print('A')
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in ncol(mat)) {
print(x)
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in ncol(mat)) {
print(x)
}
}
}
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in ncol(mat)) {
print(x)
}
}
}
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in ncol(mat)) {
print(x)
}
}
}
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in ncol(mat)) {
print(x)
}
}
}
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in ncol(mat)) {
print(x)
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:ncol(mat)) {
print(x)
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:ncol(mat)) {
sum(mat(x,)*ver(x))
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:ncol(mat)) {
sum(mat[x,]*ver(x))
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:ncol(mat)) {
sum(mat[x,]*ver[x])
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:ncol(mat)) {
sum(mat[x,]*vec[x])
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:ncol(mat)) {
sum(mat[x,]*vec(x))
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matrix(1:3,3,1)
matrix(1:3,1,3)
matrix(1,3,5)
matrix(1:3,1,3)
matrix(1:3,1,3) * matrix(1:3,3,1)
matrix(1:3,1,3) * matrix(1:3,3,1)
matrix(1:3,1,3)*matrix(1:3,3,1)
a[1]
a=matrix(1:6,2,3)
a[1]
a[3,1]
a(3,1)
a[3,1]
a[1,]
b[1]
b[,1]
b = matrix(3:1,3:1)
b[1,}
b[1,]
a=matrix(1:6,2,3)
a
b = matrix(3:1,3:1)
b
b = matrix(1:3,3:1)
b
b[,1]
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:nrow(mat)) {
sum(mat[x,]*vec[,1])
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:nrow(mat)) {
sum(mat[x,]*vec[,1])
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matvec = function(mat, vec) {
if (ncol(mat)==length(vec)) {
for (x in 1:nrow(mat)) {
print(sum(mat[x,]*vec[,1]))
}
}
}
matvec((matrix(1:6,2,3)), (matrix(3:1,3:1)))
matrix(matvec((matrix(1:6,2,3)), (matrix(3:1,3:1))))
matvec((matrix(1:12,3,4)), (matrix(4:1,4:1)))
matvec((matrix(1:12,3,4)), (matrix(1:4,4:1)))
1+8+21+40
2+10+24+44
read.csv("./data/2016-Q3.csv")
df16 <-read.csv("./data/2016-Q3.csv")
#structure of this dataframe
str(df16)
#any missing value?
length(df16[is.na(df16)])
#question 1 ####
library(tidyverse)
#check the columns and change amount column
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,eEND.DATE)
#check the columns and change amount column
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,END.DATE)
#check the class of amount
class(df16s$AMOUNT)
#change the class of column amount
df16s = df16s %>%
mutate(AMOUNT = as.numeric(AMOUNT))
class(df16s$AMOUNT)
#check NA in amount column
length(df16s$AMOUNT[is.na(df16s$AMOUNT)])
head(df16s, 10)
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=as.Date(START.DATE, "%m/%d/%Y"))
head(df16s$START.DATE, 5)
#select the columns
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,END.DATE)
#check the class of amount
class(df16s$AMOUNT)
#change the class of column amount
df16s = df16s %>%
mutate(AMOUNT = as.numeric(AMOUNT))
class(df16s$AMOUNT)
head(df16s, 10)
#check NA in amount column
length(df16s$AMOUNT[is.na(df16s$AMOUNT)])
#start.date to date type
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=as.Date(START.DATE, "%m/%d/%Y"),"20%Y/%m/%d")
head(df16s$START.DATE, 5)
#select the columns
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,END.DATE)
#check the class of amount
class(df16s$AMOUNT)
#change the class of column amount
df16s = df16s %>%
mutate(AMOUNT = as.numeric(AMOUNT))
class(df16s$AMOUNT)
head(df16s, 10)
#check NA in amount column
length(df16s$AMOUNT[is.na(df16s$AMOUNT)])
#start.date to date type
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=format(as.Date(START.DATE, "%m/%d/%Y"),"20%Y/%m/%d"))
head(df16s$START.DATE, 5)
df16s <- df16s %>%
mutate(START.DATE=format(as.Date(START.DATE, "%m/%d/%y"),"%y/%m/%d"))
head(df16s$START.DATE, 5)
#select the columns
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,END.DATE)
#check the class of amount
class(df16s$AMOUNT)
#change the class of column amount
df16s = df16s %>%
mutate(AMOUNT = as.numeric(AMOUNT))
class(df16s$AMOUNT)
head(df16s, 10)
#check NA in amount column
length(df16s$AMOUNT[is.na(df16s$AMOUNT)])
#start.date to date type
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=format(as.Date(START.DATE, "%m/%d/%y"),"%y/%m/%d"))
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=as.Date(START.DATE, "%m/%d/%y"),"%y/%m/%d")
head(df16s$START.DATE, 5)
#select the columns
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,END.DATE)
#check the class of amount
class(df16s$AMOUNT)
#change the class of column amount
df16s = df16s %>%
mutate(AMOUNT = as.numeric(AMOUNT))
class(df16s$AMOUNT)
head(df16s, 10)
#check NA in amount column
length(df16s$AMOUNT[is.na(df16s$AMOUNT)])
#start.date to date type
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=as.Date(START.DATE, "%m/%d/%y"),"%y/%m/%d")
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
#end.date to date type
head(df16s$END.DATE, 5)
class(df16s$END.DATE)
df16s <- df16s %>%
mutate(END.DATE=as.Date(END.DATE, "%m/%d/%y"),"%y/%m/%d")
head(df16s$END.DATE, 5)
class(df16s$END.DATE)
# Q1 ####
df16s %>%
summarise(sum(AMOUNT))
# Q2
df16s %>%
mutate(COVERAGE.PERIOD = END.DATE -START.DATE)
df16s
#select the columns
df16s = df16 %>%
select(PURPOSE,AMOUNT,OFFICE,START.DATE,END.DATE)
#check the class of amount
class(df16s$AMOUNT)
#change the class of column amount
df16s = df16s %>%
mutate(AMOUNT = as.numeric(AMOUNT))
class(df16s$AMOUNT)
head(df16s, 10)
#check NA in amount column
length(df16s$AMOUNT[is.na(df16s$AMOUNT)])
#start.date to date type
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
df16s <- df16s %>%
mutate(START.DATE=as.Date(START.DATE, "%m/%d/%y"),"%y/%m/%d")
head(df16s$START.DATE, 5)
class(df16s$START.DATE)
#end.date to date type
head(df16s$END.DATE, 5)
class(df16s$END.DATE)
df16s <- df16s %>%
mutate(END.DATE=as.Date(END.DATE, "%m/%d/%y"),"%y/%m/%d")
head(df16s$END.DATE, 5)
class(df16s$END.DATE)
df16s
# Q2
df16sCD = df16s %>%
mutate(COVERAGE.PERIOD = as.Date(as.character(END.DATE), format="%Y/%m/%d")-
as.Date(as.character(START.DATE), format="%Y/%m/%d"))
df16s
View(df16sCD)
# Q2
df16sCD = df16s %>%
mutate(COVERAGE.PERIOD = difftime(END.DATE ,START.DATE, units = c("days")))
df16sCD
df16s
df16s %>%
filter(AMOUNT >0)
df16s3 = df16s %>%
filter(AMOUNT >0)
class(df16s3$AMOUNT)
# Q3 annual average ####
df16s3 = df16s %>%
filter(AMOUNT <0)
# Q3 annual average ####
df16s3 = df16s %>%
filter(AMOUNT >0)
df16s
df16s3 = df16s %>%
filter(AMOUNT >0) %>%
summarise(mean(AMOUNT))
df16s3
# Q4 highest total expensitures with a start.date in 2016. ####
df16s %>%
head(df16s$START.DATE,10)
head(df16s$START.DATE,10)
class(df16s$START.DATE)
df16s %>%
#group_by(subset(START.DATE, format(START.DATE, "%Y") == 2016)) %>%
select(OFFICE) %>%
top_n(1,AMOUNT)
df16s %>%
#group_by(subset(START.DATE, format(START.DATE, "%Y") == 2016)) %>%
top_n(1,AMOUNT)
df16s %>%
top_n(1,AMOUNT) %>%
select(AMOUNT)
Am1 = df16s %>%
top_n(1,AMOUNT) %>%
select(AMOUNT)
Am1
df16s %>%
summarise(sum(AMOUNT)/Am1)
df16s %>%
summarise(sum(AMOUNT)/Am1[1])
df16s %>%
summarise(Am1/sum(Am1))
df16s %>%
summarise(Am1/sum(AMOUNT))
setwd("~/Desktop/DS project/NYDSA")
#prep ####
#Load the library
library(tidyverse)
library(ggmap)
#load the data
border = read.csv("./Border_Crossing_Entry_Data.csv")
#check the data
view(border)
str(border)
#clean the data ####
#check if there is any missing values
length(border[is.na(border)])   # no missing value
#check different levels of Border column
unique(border$Border)
#shorten these to "Canada" and "Mexico"
border <- border %>%
mutate(Border=gsub(pattern = "US-Canada Border", replacement="Canada", x=Border, ignore.case = F, fixed = T)) %>%
mutate(Border=gsub(pattern = "US-Mexico Border", replacement="Mexico", x=Border, ignore.case = F, fixed = T))
#Date only matters for month and year. so change the format to month and year only
#change class of Date column to date
border <- border %>%
mutate(Date=as.Date(Date, "%m/%d/%Y %H:%M:%S %p"))
#check the class of changed date column
class(border$Date)
#make new columns for month and year
border <- border %>%
mutate(Month =as.numeric(format(Date,"%m"))) %>%
mutate(Year =as.numeric(format(Date, "%Y")))
#see how many unique values in Measure column
unique(border$Measure)
#class of location column
class(border$Location)
class(border$Location)
border1 <- border
border1 %>%
mutate(m = gsub("POINT ( \\)","", as.character(Location)))
border1 %>%
mutate(m = gsub("[POINT ( )]","", as.character(Location)))
border1 <- border
border1 %>%
mutate(m = gsub("[POINT (   )]","", as.character(Location)))
border1
border1
border1 <- border
border1 %>%
mutate(m = gsub("[POINT (]","", as.character(Location)))
border1 <- border
border1 %>%
mutate(m = gsub("POINT","", as.character(Location)))
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m))) %>%
separate(m, c("Long", "Lat"))
border1 <- border
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m))) %>%
separate(m, c("Long", "Lat"), " ")
border1 <- border
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m))) %>%
separate(m, c("Longitude", "Latitude"), sep=" ")
border1 <- border
border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border1 = border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border2 <- border1 %>%
separate(m, c("Longitude", "Latitude"), sep=" ")
border2
library(tidyverse)
border1 <- border
border1 <- border1 %>%
mutate(m = gsub("POINT","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border2 <- border1 %>%
separate(m, c("Longitude", "Latitude"))
border2
border1
border1$m[1]
border1 <- border
border1 <- border1 %>%
mutate(m = gsub("POINT ","", as.character(Location))) %>%
mutate(m = gsub("[()]", "", as.character(m)))
border1$m[1]
border2 <- border1 %>%
separate(m, c("Longitude", "Latitude"),sep=" ")
border2
#cleaned dataset
view(border2)
#export the data
write.csv(border2, file="border2.csv", row.names=FALSE)
shiny::runApp('Border')
runApp('Border')
runApp('Border')
runExample("05_sliders")
library(shiny)
library(shinydashboard)
runExample("05_sliders")
runApp('Border')
